/*
 *  basics
 */
canvas map rendering is requestAnimationFrame loop.
loop is started and stopped through main namespace (module pattern) extensions loadMap and closeMap

/*
 * main namespace
 */
main namespace contains everything canvas related and can be imported.

    /*
     * extensions
     */
    extensions are functions that do anything with the main namespace.
    rest of the app communicates with the namespace ONLY through the extensions (if possible).
    accessible through Main.extensions.[extension]

    /*
     * worker
     */
    using worker completely removes the site unresponsiveness during map loading and other expensive operations, but introduces complexity.
    any worker job is done with worker interface.
    main's workerInterfaces communicate with the worker, nothing else
    accessible through Main.workerInterfaces.[workerInterface]
    worker's workerInterfaces are functions that do anything with the worker namespace
    interfaces are basically request-response models between main and worker

    /*
     * basics of rendering the map
     */
    map consists of layers defined in /utils/dbs/LAYERS.js (enum).
    every layer has its own ImageData - array of rgba bytes, 4 * mapWidth * mapHeight. You can edit this ImageData directly through Main.layersImages[LAYER] or extensions (preferably).
    editing a layer image wont result in canvas change. to update a layer you have to push its image to a layer context. you can do it through Main.updateLayers([layer]). this is useful because you can avoid somewhat expensive layers updates when doing many operations and only need to show the result.
    all layer contexts are copied to the main canvas context every tick, their order is based on the LAYERS object order, NOT their value in the object.

    /*
     * editing the map tiles
     */
    copying the tiles from the worker to the main takes some time and renders the site unresponsive. since it would defeat the purpose of the worker and make site laggy, world tiles (map width * map height 2d array of tile objects) are not being sent back to the main with the rest of the parsed map. because of this you need to use extension/workerInterface to edit the tiles.